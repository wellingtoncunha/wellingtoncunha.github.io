y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y ~ x))
q()
library(swirl)
swirl()
q()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
fit
summary(fit)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
predict(fit,data.frame(x=mean(x)), interval="confidence")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
?mtcars
summary(fit)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=3), interval="prediction")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=2), interval="prediction")
x<-mtcars$wt
y<-mtcars$mpg
fit2<-lm(y~I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
par(mfrow=c(1,2))
plot(x,y)
abline(fit,col="red")
plot(x/2,y)
abline(fit2,col="red")
c<-5
cf1<-summary(fit)$coefficients
cf1
c<-5
cf1<-summary(fit)$coefficients
cf1
fit4<-lm(y~I(x+c)) # add some constant c
cf2<-summary(fit4)$coefficients
cf2
b0<-cf1[1,1]
b1<-cf1[2,1]
c(b0,b1)
b0 - c*b1
fit5<-lm(y ~ 1)
fit6<-lm(y ~ x - 1)
plot(x,y)
abline(fit,col="red")
abline(fit5,col="blue")
abline(fit6,col="green")
anova(fit)
anova(fit5)
278/1126
sum(resid(fit))  #both intercept and slope
sum(resid(fit5)) #only intercept
sum(resid(fit6)) #only slope
q()
summary(mtcars)
summary(mtcars)
fit<-lm(mpg ~ cyl + wt,  mtcars)
summary(fit)$coef
plot(fit)
plot(summary(fit)$coef)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
factor(cyl)8  = -6.071
fit
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
fit2$coefficients[3]
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
compare <- anova(fit1, fit2)
compare$Pr
fit2
compare
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x, y)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the hat diagonal for the most influential point
fit <- lm(y ~ x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the slope dfbeta for the point with the highest hat value.
fit <- lm(y ~ x)
dfbetas(fit)
q()
* Quantify the MPG difference between automatic and manual transmissions
data(mtcars)
head(mtcars)
init_model <- lm(mpg ~ ., data = mtcars)
best_model <- step(init_model, direction = "both")
best_model
base_model <- lm(mpg ~ am, data = mtcars)
anova(base_model, best_model)
head(mtcars)
data(mtcars)
head(mtcars)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
head(mtcars)
init_model <- lm(mpg ~ ., data = mtcars)
best_model <- step(init_model, direction = "both")
best_model
base_model <- lm(mpg ~ am, data = mtcars)
anova(base_model, best_model)
summary(base_model)$sigma
summary(base_model)$sigma
summary(best_model)$sigma
summary(mtcars$mpg[mtcars$am=='Automatic'])
summary(mtcars$mpg[mtcars$am=='Manual'])
sd(mtcars$mpg[mtcars$am=='Automatic'])
summary(base_model)$sigma
summary(best_model)$sigma
data(mtcars)
head(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
BaseModel <- lm(mpg ~ am, data = mtcars)
InitialModel <- lm(mpg ~ ., data = mtcars)
BestModel <- step(init_model, direction = "both")
BestModel
anova(base_model, best_model)
BaseModel <- lm(mpg ~ am, data = mtcars)
InitialModel <- lm(mpg ~ ., data = mtcars)
BestModel <- step(InitialModel, direction = "both")
anova(BaseModel, BestModel)
summary(BaseModel)$sigma
summary(BestModel)$sigma
BestModel
BaseModel
InitialModel
summary(BaseModel)$sigma
anova(BaseModel, BestModel)
q()
InitialModel <- lm(mpg ~ ., data = mtcars)
BestModel <- step(InitialModel, direction = "both")
BaseModel <- lm(mpg ~ am, data = mtcars)
summary(BestModel)$sigma
summary(BestModel)$Coef
summary(BestModel)$coef
ModelComparison <- data.frame(c('Base Model', summary(BaseModel)$sigma))
ModelComparison
ModelComparison <- c('Base Model', summary(BaseModel)$sigma))
ModelComparison <- c('Base Model', summary(BaseModel)$sigma)
ModelComparison
ModelComparison <- data.frame(
Model = c('Base', 'Initial', 'Best'),
Sigma = c(
summary(BaseModel)$sigma,
summary(InitialModel)$sigma,
summary(BestModel)$sigma)
)
ModelComparison
ModelComparison
anova(BaseModel, BestModel)
BaseModel <- lm(mpg ~ am, data = mtcars)
summary(BestModel)$coef
summary(BestModel)
summary(InitialModel)
summary(BaseModel)
summary(BestModel)
data(mtcars)
head(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
summary(mtcars$mpg[mtcars$am=='Automatic'])
sd(mtcars$mpg[mtcars$am=='Automatic'])
summary(mtcars$mpg[mtcars$am=='Manual'])
sd(mtcars$mpg[mtcars$am=='Manual'])
BaseModel <- lm(mpg ~ am, data = mtcars)
InitialModel <- lm(mpg ~ ., data = mtcars)
BestModel <- step(InitialModel, direction = "both")
ModelComparison <- data.frame(
Model = c('Base', 'Initial', 'Best'),
Sigma = c(
summary(BaseModel)$sigma,
summary(InitialModel)$sigma,
summary(BestModel)$sigma)
)
ModelComparison
summary(BestModel)
par(mfrow = c(2, 2))
plot(lm1, main="Test")
par(mfrow = c(2, 2))
plot(BestModel, main="Test")
q()
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
install.packages("caret")
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
library(Hmisc)
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
featurePlot(x = training[, names], y = cutCS, plot = "box")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
## stat_bin: binwidth defaulted to range/30. Use 'binwidth = x' to adjust this.
View(testing)
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
install.packages("e1071")
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
q()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
Training <- vowel.train
Testing <- vowel.test
Training$y <- factor(Training$y)
set.seed(33833)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
Training <- vowel.train
Testing <- vowel.test
Training$y <- factor(Training$y)
Testing$y <- factor(Testing$y)
set.seed(33833)
ModelRF <- train(y ~ .,data=Training, method="rf")
ModelRF
mean(predict(ModelRF, Testing) == Testing$y) * 100
mean(predict(ModelRF, Testing) == Testing$y)
ModelGMB <- train(y ~ .,data=Training, method="gmb")
ModelGMB <- train(y ~ .,data=Training, method="GMB")
ModelGBM <- train(y ~ .,data=Training, method="gbm")
ModelGBM
mean(predict(ModelRF, Testing) == Testing$y)
mean(predict(ModelGBM, Testing) == Testing$y)
predict(ModelGBM, Testing)
Testing$y
WithPrediction <- cbind(Testing$y, predict(ModelGBM, Testing))
View(WithPrediction)
Stacked <- rbind(WithPrediction, cbind(Testing$y, predict(ModelRF, Testing))
Stacked <- rbind(WithPrediction, cbind(Testing$y, predict(ModelRF, Testing)))
View(Stacked)
colnames(Stacked)
colnames(Stacked) <- c("y", "Prediction")
mean(Stacked$y == Stacked$Prediction)
Stacked <- data.frame(Stacked)
colnames(Stacked)
mean(Stacked$y == Stacked$Prediction)
library(ggplot2)
library(plyr)
cfunc <- function(x, n) mean(x)
df2 <- data.frame(
x = c(apply(matrix(Sim10, nosim), 1, cfunc, 10),
apply(matrix(Sim20, nosim), 1, cfunc, 20),
apply(matrix(Sim40, nosim), 1, cfunc, 40)),
size = factor(rep(c(10, 20, 40), rep(nosim, 3)))
)
grid <- with(df2, seq(min(x), max(x), length = 1000))
normaldens <- ddply(df2, "size", function(DataFrame) {
data.frame(
predicted = grid,
density = dnorm(grid, mean=5, sd=5/sqrt(as.numeric(as.character((DataFrame$size)))))
)})
g <- ggplot(df2, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + geom_line(data = normaldens, aes(x = predicted, y = density), colour = "red")
g <- g + geom_vline(xintercept = 5)
#g <- g + stat_function(fun=dnorm, arg=list(mean=5), size = 1, col="Red")
#g <- g + stat_function(fun = dnorm(Sim40, mean = mean(Sim40), sd = sd(Sim40)), size = 1, col="Red")
g <- g + facet_grid(. ~ size)
g
cfunc <- function(x, n) mean(x)
df2 <- data.frame(
x = c(apply(matrix(Sim10, nosim), 1, cfunc, 10),
apply(matrix(Sim20, nosim), 1, cfunc, 20),
apply(matrix(Sim40, nosim), 1, cfunc, 40)),
size = factor(rep(c(10, 20, 40), rep(nosim, 3)))
)
grid <- with(df2, seq(min(x), max(x), length = 1000))
normaldens <- ddply(df2, "size", function(DataFrame) {
data.frame(
predicted = grid,
density = dnorm(grid, mean=5, sd=5/sqrt(as.numeric(as.character((DataFrame$size)))))
)})
cfunc <- function(x, n) mean(x)
df2 <- data.frame(
x = c(apply(matrix(Sim10, nosim), 1, cfunc, 10),
apply(matrix(Sim20, nosim), 1, cfunc, 20),
apply(matrix(Sim40, nosim), 1, cfunc, 40)),
size = factor(rep(c(10, 20, 40), rep(nosim, 3)))
)
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products')
barplot(GDPByIncomeGroup, main="GDP by Income Group", horiz=TRUE)
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shiny::runApp('C:/Users/Wellington/Desktop/DataScience/Coursera/09 Developing Data Products/Project')
shinyapps::deployApp('C://Users//Wellington//Desktop//DataScience//Coursera//09 Developing Data Products//Project')
q()
author('Presentation')
library('slidify')
setwd("C://Users//Wellington//Desktop//DataScience//Coursera//09 DevelopingData Products")
setwd("C://Users//Wellington//Desktop//DataScience//Coursera//09 Developing Data Products")
author('Presentation')
library("plyr")
GDP <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip=5, header = FALSE, nrows=190)
GDP <- GDP[, c(1, 2, 4, 5)]
colnames(GDP) <- c("Code", "Ranking", "Country", "GDP")
GDP$Ranking <- as.integer(GDP$Ranking)
GDP$GDP <- as.numeric(gsub(",", "", gsub(" ", "", GDP$GDP)))
EDU <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
mergedData <- merge(GDP, EDU, by.x="Code", by.y="CountryCode")
GDPByCountry <- mergedData[order(mergedData$Ranking), c(2,3,4,6,7)]
GDPByCountry <- subset(mergedData, GDP > 10000 & GDP < 100000)
GDPByCountry <- GDPByCountry[]
DPByIncomeGroup <- mergedData[, c(4,6)]
GDPByIncomeGroup <- ddply(GDPByIncomeGroup, .(Income.Group), colwise(sum))
GDPByIncomeGroup$GDP <- GDPByIncomeGroup$GDP / 1000
GDPByIncomeGroup <- GDPByIncomeGroup[order(GDPByIncomeGroup$GDP),]
MaxValue <- max(GDPByIncomeGroup$GDP)
xLeg <- rep(MaxValue * .55, nrow(GDPByIncomeGroup))
yLeg <- rep(1:nrow(GDPByIncomeGroup), 1) - .5
barplot(GDPByIncomeGroup$GDP, col="Light Green", space=0, horiz=TRUE, xlab="GDP (Millions of Dollars)", ylab="Income Group", main="GDP by Income Group", axisnames=FALSE)
text(cex=0.8, x=xLeg, y=yLeg, GDPByIncomeGroup$Income.Group, xpd=TRUE)
GDPByIncomeGroup <- mergedData[, c(4,6)]
GDPByIncomeGroup <- ddply(GDPByIncomeGroup, .(Income.Group), colwise(sum))
GDPByIncomeGroup$GDP <- GDPByIncomeGroup$GDP / 1000
GDPByIncomeGroup <- GDPByIncomeGroup[order(GDPByIncomeGroup$GDP),]
MaxValue <- max(GDPByIncomeGroup$GDP)
xLeg <- rep(MaxValue * .55, nrow(GDPByIncomeGroup))
yLeg <- rep(1:nrow(GDPByIncomeGroup), 1) - .5
barplot(GDPByIncomeGroup$GDP, col="Light Green", space=0, horiz=TRUE, xlab="GDP (Millions of Dollars)", ylab="Income Group", main="GDP by Income Group", axisnames=FALSE)
text(cex=0.8, x=xLeg, y=yLeg, GDPByIncomeGroup$Income.Group, xpd=TRUE)
mergedData <- merge(GDP, EDU, by.x="Code", by.y="CountryCode")
GDPByIncomeGroup <- mergedData[, c(4,6)]
publish_github("wellingtoncunha", "DevelopingDataProducts")
publish_github("DevelopingDataProducts", "wellingtoncunha")
publish_github("wellingtoncunha", "DevelopingDataProducts")
publish_github(repo = "DevelopingDataProducts", username = "wellingtoncunha")
publish_github(repo = "DevelopingDataProducts", username = "wellingtoncunha")
publish_github(repo = "DevelopingDataProducts", username = "wellingtoncunha")
publish_github(repo = "DevelopingDataProducts", username = "wellingtoncunha")
publish_github(repo = "wellingtoncunha.github.io", username = "wellingtoncunha")
publish_github(repo = "wellingtoncunha.github.io", username = "wellingtoncunha")
options(rpubs.upload.method = "internal")
